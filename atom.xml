<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://bolg.kossiitkgp.org/</id>
    <title>KOSS Bolg Blog</title>
    <updated>2024-06-12T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://bolg.kossiitkgp.org/"/>
    <subtitle>KOSS Bolg Blog</subtitle>
    <icon>https://bolg.kossiitkgp.org/img/favicon.svg</icon>
    <entry>
        <title type="html"><![CDATA[KWoC 2023 Report]]></title>
        <id>https://bolg.kossiitkgp.org/kwoc-2023-report</id>
        <link href="https://bolg.kossiitkgp.org/kwoc-2023-report"/>
        <updated>2024-06-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Hello everyone!]]></summary>
        <content type="html"><![CDATA[<p>Hello everyone!</p>
<p>The Kharagpur Winter of Code (KWoC) 2023 has come to a close, and what an incredible journey it has been! For those unfamiliar, KWoC is an annual five-week program where students, many of whom are new to open-source software, contribute to coding projects under the guidance of experienced mentors. This program, hosted by the Kharagpur Open Source Society (KOSS) at IIT Kharagpur, is open to students from all universities, creating a diverse and inclusive environment.</p>
<p><img decoding="async" loading="lazy" src="https://i.imgur.com/cbZnwzj.png" alt="" class="img_fUvR"></p>
<h2 class="anchor anchorWithStickyNavbar_ywN1" id="the-motivation">The Motivation<a class="hash-link" aria-label="Direct link to The Motivation" title="Direct link to The Motivation" href="https://bolg.kossiitkgp.org/kwoc-2023-report#the-motivation">​</a></h2>
<p>KWoC's main aim is to provide students with guidance and mentorship as they take their first steps into the world of open source. It helps build bridges between budding developers and experienced mentors. This early guidance is especially beneficial for freshmen and sophomores, helping them build confidence and skills that will be invaluable for larger programs like Google Summer of Code (GSoC).</p>
<h2 class="anchor anchorWithStickyNavbar_ywN1" id="how-it-works">How It Works<a class="hash-link" aria-label="Direct link to How It Works" title="Direct link to How It Works" href="https://bolg.kossiitkgp.org/kwoc-2023-report#how-it-works">​</a></h2>
<p>KWoC has always been an online program, operating through its dedicated <a href="https://kwoc.kossiitkgp.org/" target="_blank" rel="noopener noreferrer">website</a>. The process begins with mentors registering their projects. By the last week of November, the accepted projects are listed on the website, and student registrations begin. Students then browse through the projects, select those that interest them, and start contributing.</p>
<h2 class="anchor anchorWithStickyNavbar_ywN1" id="the-kickoff">The Kickoff<a class="hash-link" aria-label="Direct link to The Kickoff" title="Direct link to The Kickoff" href="https://bolg.kossiitkgp.org/kwoc-2023-report#the-kickoff">​</a></h2>
<p>This year's journey started with an Introductory Seminar on November 11th, held on Google Meet and livestreamed on youtube.</p>
<p><strong>The seminar covered:</strong></p>
<ul>
<li>What KWoC is all about</li>
<li>Eligibility and participation details</li>
<li>Benefits for both beginners and experienced coders</li>
<li>The program timeline</li>
<li>Helpful resources</li>
<li>FAQs and live Q&amp;A</li>
</ul>
<p><strong>Participation Stats</strong></p>
<ul>
<li>Mentor Registrations: Began on November 12th</li>
<li>Student Registrations: Started on November 25th</li>
<li>Registered Mentors: 107</li>
<li>Approved Projects: 69</li>
<li>Registered Students: 1393</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_ywN1" id="the-coding-period">The Coding Period<a class="hash-link" aria-label="Direct link to The Coding Period" title="Direct link to The Coding Period" href="https://bolg.kossiitkgp.org/kwoc-2023-report#the-coding-period">​</a></h2>
<p>The coding period officially started on December 9th. This phase was a hive of activity as students collaborated with their mentors, working on issues, and implementing new features. By December 24th, mid-evaluations were conducted. To pass, students needed to have at least one open or merged pull request (PR) in their project. 133 students met this criterion and moved forward.</p>
<h2 class="anchor anchorWithStickyNavbar_ywN1" id="mid-and-end-evaluations">Mid and End Evaluations<a class="hash-link" aria-label="Direct link to Mid and End Evaluations" title="Direct link to Mid and End Evaluations" href="https://bolg.kossiitkgp.org/kwoc-2023-report#mid-and-end-evaluations">​</a></h2>
<p>End evaluations began on January 9th, requiring students to have at least two open or merged PRs. 100 students met this requirement and were asked to write detailed blog reports about their KWoC experience, with a submission deadline of January 15th. These reports, along with mentor feedback, determined the successful participants.</p>
<h2 class="anchor anchorWithStickyNavbar_ywN1" id="highlights-and-achievements">Highlights and Achievements<a class="hash-link" aria-label="Direct link to Highlights and Achievements" title="Direct link to Highlights and Achievements" href="https://bolg.kossiitkgp.org/kwoc-2023-report#highlights-and-achievements">​</a></h2>
<p>KWoC 2023 saw tremendous achievements and growth:</p>
<ul>
<li>Projects: 69</li>
<li>Mentors: 107</li>
<li>Students Registered: 1393</li>
<li>Students with At Least One Merged PR: 90</li>
<li>Mid Evaluations Passed: 133</li>
<li>End Evaluations Passed: 100</li>
<li>Blog Reports Submitted: 71</li>
<li>Successful Participants: 62</li>
<li>Total Merged PRs: 503</li>
<li>Total Commits: 1353</li>
<li>Lines of Code Changed: +1.01M / -52k</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_ywN1" id="closing-thoughts">Closing Thoughts<a class="hash-link" aria-label="Direct link to Closing Thoughts" title="Direct link to Closing Thoughts" href="https://bolg.kossiitkgp.org/kwoc-2023-report#closing-thoughts">​</a></h2>
<p>Embarking on an open-source project can be intimidating, especially for those new to coding. It often begins with the excitement of exploring projects and wanting to make a meaningful contribution. However, navigating unfamiliar codebases and understanding project conventions can be intimidating. The key is to break down complex problems into smaller, solvable pieces and to learn progressively.  approach not only helps in understanding coding practices but also builds resilience and patience to work on large projects.</p>
<p>Mentor interaction is crucial in KWoC, and while some students faced challenges in communication, many found mentors to be incredibly supportive. The relationship between mentors and mentees often blossomed into a collaborative learning experience, with mentors guiding students through coding practices and project development. We extend our heartfelt thanks to all mentors for their invaluable support and dedication throughout the program</p>
<p>KWoC 2023 has been a celebration of code, collaboration, and community. The success of this edition is a testament to the hard work and passion of everyone involved—students, mentors, and the KOSS team. Certificates were awarded to successful participants, and the top 10 performers will be awarded goodies from FOSS United.</p>
<p>As we wrap up another successful year of KWoC, we're excited to see how this experience will impact the future paths of all participants. Collaboration and learning are at the heart of open source, and KWoC 2023 has been a great example of this spirit.</p>
<p>A heartfelt thank you to everyone who contributed to making this year's event a success.</p>
<p>Best wishes,
Kharagpur Open Source Society</p>]]></content>
        <author>
            <name>Tejas Pandey</name>
            <uri>https://github.com/tejasexpress</uri>
        </author>
        <category label="KOSS" term="KOSS"/>
        <category label="KWoC" term="KWoC"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git Cheatsheet]]></title>
        <id>https://bolg.kossiitkgp.org/git-cheatsheet</id>
        <link href="https://bolg.kossiitkgp.org/git-cheatsheet"/>
        <updated>2018-06-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[What is Git?]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_ywN1" id="what-is-git">What is Git?<a class="hash-link" aria-label="Direct link to What is Git?" title="Direct link to What is Git?" href="https://bolg.kossiitkgp.org/git-cheatsheet#what-is-git">​</a></h2>
<p><img decoding="async" loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*8xhLJt8Nlps8CDETPgO6lg.jpeg" alt="" class="img_fUvR"></p>
<p>From <a href="https://git-scm.com/" target="_blank" rel="noopener noreferrer">Git’s</a> official website:</p>
<p>Git is a <a href="https://git-scm.com/about/free-and-open-source" target="_blank" rel="noopener noreferrer">free and open source</a>
distributed version control system designed to handle everything from small to
very large projects with speed and efficiency.</p>
<p><strong>About Version Control</strong></p>
<p>What is version control, and why should you care? Version control is a system
that records changes to a file or set of files over time so that you can recall
specific versions later. Even though examples in most of the cases show software
source code as the files under version control, in reality any type of file on a
computer can be placed under version control.</p>
<p><strong>To install Git:</strong></p>
<p><code>sudo apt-get install git</code></p>
<p><strong>To check version:</strong></p>
<p><code>git -- version</code></p>
<p><strong>For configuring:</strong></p>
<p><code>git config -- global &lt;keyword&gt; “Data”</code></p>
<ul>
<li><code>&lt;keyword&gt;</code> can be <code>user.name</code> ,<code>user.email</code>, <code>core.editor</code> etc.</li>
<li>To display current saved configration type <code>git config --list</code></li>
</ul>
<p><strong>For help:</strong></p>
<p><code>git help &lt;verb&gt;</code></p>
<p>eg: <code>git help config </code>for help regarding configration process</p>
<p><strong>Creating a local repository:</strong></p>
<ul>
<li>Simply cd into the directory you want to track and simply type <code>git init</code>. This
will create a .git file in the directory with a basic skeleton without any
commits.</li>
</ul>
<p><strong>To check which files can be commited:</strong></p>
<p><code>git status</code></p>
<p>this will list the files that can be commited</p>
<ul>
<li>To ignore files create a .gitignore file using <code>touch .gitignore</code></li>
<li>Open this using text editor and add names of files you want to ignore</li>
</ul>
<p><strong>Moving files to staging area:</strong></p>
<ul>
<li>For adding files individually use –<code>git add &lt;filename&gt;</code></li>
<li>For adding all files at once use –<code>git add -A</code></li>
<li>To remove files from staging area use –<code>git reset &lt;filename&gt;</code>and to remove all
simply type <code>git reset</code></li>
</ul>
<p><strong>To commit the files:</strong></p>
<p><code>git commit</code></p>
<p>but it is necessary to add messages with the commit to make sure what we did ;
so for that we use <code>-m</code> extension like <code>git commit -m “message”</code></p>
<p><img decoding="async" loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*fwUZtFBXFvHwMwmAWlde5w.png" alt="" class="img_fUvR">
<span class="figcaption_hack">Staging and committing Flowchart.</span></p>
<p><strong>To check the commit history:</strong></p>
<p><code>git log</code></p>
<p><strong>Cloning a repository from internet:</strong></p>
<p><code>git clone &lt;url&gt; &lt;location&gt;</code></p>
<ul>
<li>To clone into current directory use <code>.</code>in place of location.</li>
<li>To check status of the cloned repository use <code>git remote -v</code> This will give the
location from where it is fetched.</li>
<li><code>git branch -a</code> gives all the branches in the cloned repository.</li>
</ul>
<p><strong>Changing and submitting:</strong></p>
<ul>
<li>Make changes to the file of the cloned repository.Now to see change made type
<code>git diff &lt;commit&gt;</code></li>
</ul>
<p>This will display the change made with respect to the <code>&lt;commit&gt;</code>. By default if
<code>&lt;commit&gt;</code> field is left empty , Git compares it with <code>HEAD</code> i.e the last
commit.</p>
<blockquote>
<p>Another feature or form of git diff is</p>
</blockquote>
<blockquote>
<p><code>git diff --cached &lt;commit&gt;</code></p>
</blockquote>
<blockquote>
<p>This shows the diff between your <strong>staged changes</strong> and the <code>&lt;commit&gt;</code>. So, here
it gives the diff between your index and the last commit.</p>
</blockquote>
<blockquote>
<p><code>git diff &lt;commit&gt;</code> shows the diff between the <strong>current working tree</strong> and
the <code>&lt;commit&gt;</code>.</p>
</blockquote>
<ul>
<li>Now <code>git status</code> will view the modified files .</li>
<li>Add the file to the staging area using <code>git add -A.</code></li>
<li>Commit these files with appropriate message .</li>
<li>Now before pushing it back . We need to pull and check whether any other person
made a change in the branch since the last time type in <code>git pull origin master</code>
( If on master branch else use branch name in place of master).</li>
</ul>
<blockquote>
<p><strong>IMPORTANT NOTE:</strong></p>
</blockquote>
<blockquote>
<p><code>git pull</code> is often confused with <code>git fetch</code> .The basic difference is stated
below.</p>
</blockquote>
<blockquote>
<p><code>git fetch</code> really only downloads new data from a remote repository — but it
doesn’t integrate any of this new data into your working files. Fetch is great
for getting a fresh view on all the things that happened in a remote
repository.<br> Due to it’s “harmless” nature, you can rest assured: fetch will
never manipulate, destroy, or screw up anything.<code>git fetch</code> is also useful
when we manually wish to merge or check and merge conflicts that arise whereas
<code>git pull</code>* *directly fetches and merges (refer branching for merge). It is
therefore more preferred to use <code>git fetch</code>.</p>
</blockquote>
<blockquote>
<p><code>git pull</code> in contrast, is used with a different goal in mind: to update your
current HEAD branch with the latest changes from the remote server. This means
that pull not only downloads new data; it also directly <strong>integrates</strong> it into
your current working copy files.</p>
</blockquote>
<p>Now for finally pushing type in –&gt;</p>
<p><code>git push origin master</code></p>
<p><img decoding="async" loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*lWS_YsYDgGNzwleoSK8jOg.png" alt="" class="img_fUvR">
<span class="figcaption_hack">Basic process Flowchart.</span></p>
<p><strong>Branching:</strong></p>
<p><img decoding="async" loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*roh6Eb2dFSeQhM0Fgs0cng.png" alt="" class="img_fUvR">
<span class="figcaption_hack">A typical image which represents blue dots as master and rest as side branches.</span></p>
<ul>
<li>To create a new branch use <code>git branch &lt;branchname&gt;</code></li>
<li>To check all the branches present use <code>git branch</code></li>
<li>To switch over branch use <code>git checkout &lt;branchname&gt;</code></li>
<li>To push a commited changes type in <code>git push -u origin &lt;branchname&gt;</code></li>
<li>To merge the current branch you are working on to master use <code>git merge &lt;branchname&gt;</code></li>
<li>To push the changes we simply use <code>git push origin master</code></li>
<li>To check it they are merged type in <code>git branch --merged</code></li>
<li>If the branch is successfully merged we can now delete the branch–<code>git branch -d &lt;branchname&gt;</code></li>
</ul>
<p><strong>To switch to a previous version of the code:</strong></p>
<p>We do <code>git reset &lt;mode&gt; &lt;SOME-COMMIT&gt;</code>(some commit is the commit number ) then
Git will:</p>
<ul>
<li>Make your current branch (typically <code>master</code>) back to point at <code>&lt;SOME-COMMIT&gt;</code>.</li>
<li>Then it will modify your working tree and the index (“staging area”) according
to the <code>&lt;mode&gt;</code> selected.</li>
<li>The mode must be one of the following (If <code>&lt;mode&gt;</code> is left blank then by default
<code>--mixed</code> is selected) —</li>
<li><code>--soft </code>—Does not touch the index file or the working tree at all (but resets
the head to<code> &lt;SOME-COMMIT&gt;</code>, just like all modes do). This leaves all your
changed files “Changes to be committed”, as <em>git status</em> would put it.</li>
<li><code>--mixed </code>— Resets the index but not the working tree (i.e. the changed files
are preserved but not marked for commit) and reports what has not been updated.
This is the default action.</li>
<li><code>--hard </code>— Resets the index and working tree. Any changes to tracked files in
the working tree since <code>&lt;SOME-COMMIT&gt;</code> are discarded.</li>
</ul>
<p><strong>Stashing</strong></p>
<p>Often there is a condition where code is in a messy state and you don’t want to
work any further . Also you can’t commit this <em>half-written code</em>. In such
conditions function called <code>git stash</code> is used.</p>
<ul>
<li>Type in <code>git stash</code> this will push this code onto a stack while keeping the
working directory clean.Further use of this function again and again on the same
code will generate a stash stack.</li>
<li>To display the stash stack use <code>git stash list</code> .The list will be numbered as
<code>stash@{0}</code>,<code>stash@{1}</code> ….<code>stash@{n}</code> .</li>
<li>Finally when you decide to work again and want to apply the changes use <code>git stash apply</code> . To apply any older stash from the stash stack use <code>git stash apply stash@{n}</code> where n is the stash number.</li>
</ul>
<p><strong>For Reference regarding Git :</strong></p>
<ul>
<li>For practicing and learning git checkout —
<a href="https://github.com/kossiitkgp/git-sandbox" target="_blank" rel="noopener noreferrer">https://github.com/kossiitkgp/git-sandbox</a></li>
<li>Basic git
:<a href="https://www.youtube.com/watch?v=HVsySz-h9r4&amp;t=464s" target="_blank" rel="noopener noreferrer">https://www.youtube.com/watch?v=HVsySz-h9r4&amp;t=464s</a></li>
<li>Resolving a pull request:
<a href="https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/" target="_blank" rel="noopener noreferrer">https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/</a></li>
</ul>]]></content>
        <author>
            <name>Taapas Agrawal</name>
            <uri>https://github.com/taapasX28</uri>
        </author>
        <category label="Engineering" term="Engineering"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[An informal introduction to KWoC]]></title>
        <id>https://bolg.kossiitkgp.org/informal-introduction-to-kwoc</id>
        <link href="https://bolg.kossiitkgp.org/informal-introduction-to-kwoc"/>
        <updated>2017-11-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Great People of tomorrow, every perfume starts with one ingredient but it is]]></summary>
        <content type="html"><![CDATA[<p><strong>Great People of tomorrow, every perfume starts with one ingredient but it is
the last one that makes it come to life.</strong></p>
<p>Hi! and Welcome! To all esteemed student who are trying to pursue their dreams
irrespective of their departments and previous experience.</p>
<p>Everyone is welcome. Here “Everyone” is not a metaphor, “Everyone” means
everyone.</p>
<p>Open source is not just “GSoC”. It is a lot about, idea, ego, altruism,
expression and satisfaction. From software to hardware to information anything
can be opensource. We do open-source because we love to. “GSoC” is just a good
motivation to start.</p>
<p>Some famous open source projects:</p>
<p>Firefox, Linux, Ubuntu, VLC.</p>
<p><strong>Now coming back to KWoC</strong>, common problems faced and how to be prepared.</p>
<p><strong>Psychological Barriers</strong> :- Completing KWoC requires you to overcome a
statement “I have just started with coding” or “These are State of Art things,It
requires a lot of experience”. I will easily term these statements as myths or
excuse.</p>
<p><strong>Why these thoughts arise</strong>?</p>
<p>From project info. You will read fancy terms as “Scraping” “Audio-recognition”
“Natural Language Processing” “Deep Learning” “Networking” and you will lose
your heart. But the matter of truth is that project info tells you just about
what that project really does, not about the process how it performs that task.
In most of the projects mentioned, you are not going to implement everything
yourself and you don’t need to read everything present in the codebase. There
are pre-implemented library for most of state of art things, you just need to
learn some basic info about how to use these libraries.</p>
<p>Most of the software development is based on basic conditional statements,
libraries and lot of common sense.</p>
<p><strong>Mentor Problem:</strong>- A lot of time there is a problem in response of mentor. A
lot of time mentor doesn’t respond in a helpful way or doesn’t respond at all.
Let me tell you a ravishing truth “This phenomenon happens in GSoC as well”.
Really you can’t help. Now what, you are in shoes of Robert frost, “Two roads
diverged in a yellow wood, And sorry I could not travel both”, either you can
become hopeless again and take a road more traveled or you can make it a
memorable event where you overcame your mediocrity. Try some other project with
similar portfolio. The cycle is shortlist project, talk to mentor, if you find
him convincing or if you think you can do project without his guidance then only
proceed, then code debug and repeat.Bug co-ordinator, but mark my word if you
are bugging anyone it’s your responsibility to respect his/her time, give back
your effort or remember that “Karma is a bitch”.</p>
<p>**Ubuntu:-**If you are new to ubuntu, “KWOC is going to be really awesome” .
Because you will remember this winter for like 1–2 years, because if you are
high on grit you will be going through a lot of learning shit. Okay, Siri is
here to your rescue, Ubuntu is nothing like Windows but considering you as a
Windows user, Instead of .exe there are other methods to install applications.</p>
<p><img decoding="async" loading="lazy" src="https://cdn-images-1.medium.com/max/600/0*7IlL4k_OFlZhgC3u." alt="" class="img_fUvR">
<span class="figcaption_hack">Here is some Chinese wisdom for you my friend.</span></p>
<p>There is terminal in ubuntu <strong>(ctrl + alt + t)</strong>. Here is an important
<strong>[</strong><a href="https://www.pcsteps.com/5010-basic-linux-commands-terminal/" target="_blank" rel="noopener noreferrer">link</a><strong>]</strong> to
make you little aware of terminal. Get aware of this blog, terminal is quite
important for software development. Here is the
<strong><a href="https://ubuntuforums.org/showthread.php?t=801404" target="_blank" rel="noopener noreferrer">**[chest]</a> of all beginner
friendly links.How to install software and
libraries</strong>[<strong><a href="https://askubuntu.com/questions/307280/how-do-i-install-applications-in-ubuntu" target="_blank" rel="noopener noreferrer">link</a></strong>]<strong>.
You don’t need to learn everything at one go. As you start coding and setting up
environment for your respective project refer to these link as per need. If you
have not installed Ubuntu then visit this
<strong>[l</strong><a href="https://wiki.metakgp.org/w/How_to_install_Ubuntu_as_Dual_Boot" target="_blank" rel="noopener noreferrer">ink</a></strong>]**.</p>
<p><strong>Git:-</strong> A command line tool to save different versions of your code wrt to
changes. Nothing more or less than that. People have complicated this
unnecessarily. It also interacts with Github and Bitbucket.</p>
<p>One of the best places to learn git is <a href="http://learngitbranching.js.org/" target="_blank" rel="noopener noreferrer">Learn Git
Branching</a></p>
<p>Starter pack of git :-</p>
<p>a) If you have installed Ubuntu very recently then for installation of git</p>
<p>sudo apt update &amp;&amp; sudo apt install git</p>
<p>b) When you use git for the first time, you’ll have to configure it with details
matching with your GitHub profile.</p>
<p>git config — global user.name “
”</p>
<p>git config — global user.email “
”</p>
<p>c) If you are behind a proxy server then to configure git to access Github.</p>
<p>git config — global http.proxy 172.16.2.30:8080</p>
<p>d) Then login in your Github account.</p>
<p><strong>This is just a sample. Change URL according to your project. Don’t just
blindly copy paste. Read instruction properly.</strong></p>
<p>e) Visit this link <a href="https://github.com/kossiitkgp/kossiitkgp.github.io" target="_blank" rel="noopener noreferrer">Kossiitkgp website
repo</a> [Visit your respective
project link].</p>
<p>f) On top right of that window click on watch button and pick watching option</p>
<p>g) Beside that button is star, star it as well, then there is fork button, click
on fork button.</p>
<p>h) Then you will be automatically directed to your forked window.</p>
<p>k) Click on that green button of clone or download.</p>
<p>l) When you click there, a menu appears where there is an option to copy link
but ensure that you copy the link is in this format</p>
<p><img decoding="async" loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*bzxLympOO7EubZJW." alt="" class="img_fUvR"></p>
<p>And not in this format:</p>
<p><img decoding="async" loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*NuKuoB2gB1FnM4af." alt="" class="img_fUvR"></p>
<p>m) Then press ctrl+alt+t</p>
<p>n)Then enter in terminal “git clone ” and then press ctrl+shift + v and then hit
enter (hitting enter is an untold rule).</p>
<p>git clone</p>
<p>o) cd kossiitkgp.github.io <strong>[change according to name of your project]</strong></p>
<p>p) Then enter in terminal git remote add upstream and then press ctrl+shift+v</p>
<p>git checkout -b newbranch</p>
<p>r) If you can, edit some files in cloned folder (using git clone)for productive
use, save your changes by ctrl + s (if using sublime or gedit etc) .</p>
<p>s) Then properly review your changes then type this command in terminal in
already opened terminal.</p>
<p>git add -A</p>
<p>git commit -m “
”</p>
<p>git push origin</p>
<p>v) Enter your username and password. While entering password you will not see
anything</p>
<p>w) Done</p>
<p>x) Then visit
<a href="https://github.com/yourusername" target="_blank" rel="noopener noreferrer">https://github.com/your-user-name</a><strong>(plz
change)</strong>/kossiitkgp.github.io</p>
<p>y) Then click on pull request then click on create new pr.(Check two branches
which you are comparing)</p>
<p><img decoding="async" loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*26RvHxhcjsbA4ZSJ." alt="" class="img_fUvR"></p>
<p><img decoding="async" loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*nfM7sqVODhn2qA30." alt="" class="img_fUvR"></p>
<p><img decoding="async" loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*xixf1SOFoTSCeN98." alt="" class="img_fUvR"></p>
<p>z) If you are sending pr after few days of cloning then before <strong>git push</strong>
first do</p>
<p>git pull</p>
<p>**(there are other methods as well like fetch and rebase) **or face the wrath of
merge conflict.</p>
<p>For proper crisp tutorial read
<a href="https://www.atlassian.com/git/tutorials" target="_blank" rel="noopener noreferrer">[this]</a>.</p>
<p><strong>Github:-</strong> It is just a website(like Fb/Orkut) where pull request are similar
to Fb’s friend request. It is definitely more productive and useful.</p>
<p>But a more complicated definition</p>
<p><em>“GitHub is a web-based Git or version control repository and Internet hosting
service. It is mostly used for code. It offers all of the distributed version
control and source code management (SCM) functionality of Git as well as adding
its own features. It provides access control and several collaboration features
such as bug tracking, feature requests, task management, and wikis for every
project.”</em></p>
<p>Definitely, it gives a lot more insight only if you understand the terminology
:) :)</p>
<p><strong>Reading codebase</strong>:- My steps would be:</p>
<p><strong>A)</strong></p>
<p><em>1. Setup a source insight( or any good source code browser you use)
workspace/project with all the source, header files, in the code base. Browsing
at a higher level from the top most function(main) to lowermost function. During
this code browsing, keep making notes on a paper/or a word document tracing the
flow of the function calls. Do not get into function implementation
nitti-gritties in this step, keep that for a later iterations. In this step keep
track of what arguments are passed on to functions, return values, how the
arguments that are passed to functions are initialized how the value of those
arguments set modified, how the return values are used ?</em></p>
<p><em>2. After one iteration of step 1, after which you have some level of
understanding of code and data structures used in the code base, setup
a…………………..</em><a href="https://stackoverflow.com/questions/214605/the-best-way-to-familiarize-yourself-with-an-inherited-codebase" target="_blank" rel="noopener noreferrer">[source]</a></p>
<p><strong>B)</strong></p>
<ol>
<li>
<p>Identify why I’m reading code. Could be to understand an algorithm, see
different coding style, learn a language, find a defect, figure out a
workaround, understand a badly documented feature, know how to extend a feature,
make a plugin, discover how to exploit a feature beyond the initial intents, …</p>
</li>
<li>
<p>Find where to start reading. That could be the main/index file of the
application or library, a manifest. Or you could search the code for a
documented
feature……………….<a href="https://www.quora.com/How-do-you-read-a-big-code-base-like-a-pro" target="_blank" rel="noopener noreferrer">[source]</a></p>
</li>
</ol>
<p><strong>Googling:-</strong> Google any error which comes while development.This
<a href="https://medium.com/@apoorvakumar169/art-of-searching-the-web-for-soft-dev-1-4e7044c6f95f" target="_blank" rel="noopener noreferrer">[URL]</a>
is in different context though. But you can get some idea. If you face any
problem while development just translate your problem to words and search, if
you are not getting solution reframe your problem and then search again. Before
asking anyone perform the above instruction at least two times.</p>
<p><strong>Learning:-</strong> Learn what you google. If you are just googling and not learning
you are equally dependent as you were before. Here learning refers to mugging.</p>
<p>**Libraries:-**This is the basic difference b/w Windows and Ubuntu , In Windows,
we install whole everything to do something but in Ubuntu, we install something
to do a lot of thing. A minimalistic approach towards development.</p>
<p>As one of the member of open-source community, I would like you to introduce to
its manifesto</p>
<p><em>We need to take information, wherever it is stored, make our copies and share
them with the world. We need to take stuff that’s out of copyright and add it to
the archive. We need to buy secret databases and put them on the Web. We need to
download scientific journals and upload them to file sharing networks. We need
to fight
for……….</em><a href="https://en.wikisource.org/wiki/Guerilla_Open_Access_Manifesto" target="_blank" rel="noopener noreferrer">[source]</a></p>
<p><em>Collective intelligence — multinational, multiagency, multidisciplinary,
multidomain information-sharing and sense-making — is the only means of
obtaining near-real time understanding of complex systems sufficient to achieve
resilience in the face of changes. Many of these changes, including biospheric
ones such as climate change and depletion of planetary resources, are the result
of human activity and industry in the last three
centuries.</em><a href="http://realitysandwich.com/151036/open_source_everything_manifesto/" target="_blank" rel="noopener noreferrer">[source]</a></p>
<p>In a more beautiful way</p>
<p><strong>“Beneath the mask, there is more than flesh, there is an idea and ideas are
bulletproof”</strong></p>
<p>With Love From:</p>
<p><strong>Kharagpur Open Source Society</strong></p>]]></content>
        <author>
            <name>Apoorva Kumar</name>
            <uri>https://github.com/rava-dosa</uri>
        </author>
        <category label="KOSS" term="KOSS"/>
        <category label="KWoC" term="KWoC"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Writing Kickass READMEs]]></title>
        <id>https://bolg.kossiitkgp.org/writing-kickass-readmes</id>
        <link href="https://bolg.kossiitkgp.org/writing-kickass-readmes"/>
        <updated>2017-03-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Writing documentation for code is extremely important. Alas! I realized this]]></summary>
        <content type="html"><![CDATA[<p>Writing documentation for code is <strong>extremely</strong> important. Alas! I realized this
late. Nevertheless, you should not make this mistake again.</p>
<p>This is written with respect to software related READMEs, if you want guidelines
for other stuff, then probably this isn’t the right place.</p>
<p>Let’s discuss the potential problems of not having a good README:</p>
<h3 class="anchor anchorWithStickyNavbar_ywN1" id="not-a-clear-description-of-the-project">Not a clear description of the project<a class="hash-link" aria-label="Direct link to Not a clear description of the project" title="Direct link to Not a clear description of the project" href="https://bolg.kossiitkgp.org/writing-kickass-readmes#not-a-clear-description-of-the-project">​</a></h3>
<p>I don’t recount how many times this has happened with me. I usually just scroll
through all of my friends’ projects on GitHub to see what they are upto these
days and time and again I have been disappointed by not seeing a good
description about the project and it is too time consuming to read the whole
source code to find out what that repository is actually doing.</p>
<p>In fact some professional projects too have vague description and you are left
clueless as to what the code does. Sometimes the project is so big that they
can’t really mention all of it in one thing. That is the time you should
probably split it in many repositories or folders (if you desperately want a big
mono repo like Google) and each folder should contain some high-level
information of what the code inside it will do, just like recursive <code>Makefiles</code>.</p>
<h3 class="anchor anchorWithStickyNavbar_ywN1" id="not-having-a-installation-guide-or-an-incomplete-one">Not having a installation guide (or an incomplete one)<a class="hash-link" aria-label="Direct link to Not having a installation guide (or an incomplete one)" title="Direct link to Not having a installation guide (or an incomplete one)" href="https://bolg.kossiitkgp.org/writing-kickass-readmes#not-having-a-installation-guide-or-an-incomplete-one">​</a></h3>
<p>So since you have got the viewer interested in trying our your software by
writing a good introduction, you would now probably piss off her by sucking at
writing an installation guide.</p>
<p>What a developer should understand is that since your development environment is
setup to run that code, doesn’t mean everybody’s is. One should always write the
whole installation process for all systems that the software supports and it
should clearly mention that the software doesn’t really have support for this
system but it would be great to support it in future or something.</p>
<p>For unix-based systems, one should list out all the ways to install the
software. Let’s take an example of Ubuntu. If you have managed to get your
software packaged with a <code>.deb</code> file and also uploaded it upstream so that it
can be used with <code>apt-get</code>, then that’s just awesome!</p>
<p>Sometimes you might be releasing it and then packing the source code in a
<code>tar.gz</code> format, still awesome. In the latter case, it would be worth while to
mention all of the dependencies required. Also, just the name isn’t enough,
their exact version numbers is even better because you might never know when a
python code breaks because of the version bump because well that’s how things
work in python world.</p>
<p>If you are expecting the user to do a <code>gcc</code> based compiling for each source code
file then God just forgive you. It is time to move on to at least <code>Makefiles</code> to
automate that process for you.</p>
<p>If something doesn’t work in particular systems, it is <strong>important</strong> to list it
out.</p>
<h3 class="anchor anchorWithStickyNavbar_ywN1" id="no-user-documentation">No User Documentation<a class="hash-link" aria-label="Direct link to No User Documentation" title="Direct link to No User Documentation" href="https://bolg.kossiitkgp.org/writing-kickass-readmes#no-user-documentation">​</a></h3>
<p>You don’t have a user documentation? Well then how do you expect others to use
your software. User documentation should be in another file or folder (if it is
quite big) and should probably be in some kind of a format which can be rendered
easily. You can either write it in markdown format or in Github wiki’s so that
it can be easily read on GitHub or you can write in <code>man</code> pages form for the
oldies to read it. But you should have it. And that’s not it, your README should
explicitly point out to the documentation and also tell the user how to access
it and actually read it.</p>
<p>Also you can include the very basic use case in the README itself.</p>
<h3 class="anchor anchorWithStickyNavbar_ywN1" id="no-guide-for-people-to-actually-contribute">No guide for people to actually contribute<a class="hash-link" aria-label="Direct link to No guide for people to actually contribute" title="Direct link to No guide for people to actually contribute" href="https://bolg.kossiitkgp.org/writing-kickass-readmes#no-guide-for-people-to-actually-contribute">​</a></h3>
<p>If you have the viewer till now and she is thinking of actually contributing to
your project, then kudos, your project is <strong>awesome</strong>.</p>
<p>A very important part of the contributing guide is to setup the development
environment. Again in this, it is worthwhile to get into the platform specific
information. For eg. Windows will have different development environment while
Ubuntu will have a different one. You should mention what IDE you used or the
tools that you used.</p>
<p>Now your project might have some development related dependencies. You should
mention about that too. Now finally the viewer can have successful environment
setup to actually contribute to your code.</p>
<p>Now, you might be following some conventions for writing your code, right? It is
worth while to mention the conventions that you have followed in a separate file
and link it in the README.</p>
<p>Then you would have a specific way or two in which you accept others’ code,
right? You might be using Github’s Pull Request based system or the age old
sending patches via email using <code>git-format-patch</code> and <code>git-send-email</code> just
like old times. Whichever you prefer, it is important to specify this in a new
file possibly named as <code>CONTRIBUTING GUIDELINES</code> or something. If you have any
specifics about the project <strong>mention</strong> it there. Don’t just expect people to
know it by default.</p>
<p>It is also worth while to link the <code>easy to fix</code> bugs for new comers so that
they can get familiar with the code base without trying to mingle with the core
parts of the software.</p>
<h3 class="anchor anchorWithStickyNavbar_ywN1" id="no-technical-documentation">No technical documentation<a class="hash-link" aria-label="Direct link to No technical documentation" title="Direct link to No technical documentation" href="https://bolg.kossiitkgp.org/writing-kickass-readmes#no-technical-documentation">​</a></h3>
<p>If you are having a big project, then you might be having a “core” part which is
used by other parts of code. Have you documented it? Or you just expect people
to <code>git-grep</code> and <code>git-blame</code> to find the relevant use cases, definition of the
functions and the documentation inside the commit messages? If you are doing
that, it is not exactly bad (I understand you might be having your own reasons)
but it is good to write a technical documentation wherein you will tell the
programmer what a method does and how to use it. This will also make sure she
doesn’t write a method to do the same stuff again and thus it would reduce your
redundancy.</p>
<h3 class="anchor anchorWithStickyNavbar_ywN1" id="no-mention-of-how-to-run-tests">No mention of how to run tests<a class="hash-link" aria-label="Direct link to No mention of how to run tests" title="Direct link to No mention of how to run tests" href="https://bolg.kossiitkgp.org/writing-kickass-readmes#no-mention-of-how-to-run-tests">​</a></h3>
<p>Of course you project has tests, otherwise how can you make sure that by writing
new code, you don’t break the old code? Your README should contain how to run
the test suite. There are tons of different test suites available in the market
and it is time consuming for people to check out your test framework and make
guesses as how one could probably run it. You should mention how to run
individual tests, the whole test suite, and how to skip some tests, and if your
test suite framework doesn’t support all of these features, then maybe the one
you are using should be replaced.</p>
<h3 class="anchor anchorWithStickyNavbar_ywN1" id="no-license">No license<a class="hash-link" aria-label="Direct link to No license" title="Direct link to No license" href="https://bolg.kossiitkgp.org/writing-kickass-readmes#no-license">​</a></h3>
<p>Yes, legal matters are important too! Whether you are releasing it as an truly
open-sourced software with <code>BSD</code> license or something else, you should mention
it. If you don’t realize the importance of licensing, that is maybe because your
project isn’t big enough. Once a lot of people read your code, use it, they
might try to finger with it whether you like it or not. You should explicitly
specify “how much fingering” you can tolerate in a separate file named as
<code>LICENCE</code> in full detail like a legal document and if you are using a popular
license, you can just mention the name in the README.</p>
<h3 class="anchor anchorWithStickyNavbar_ywN1" id="no-place-to-mention-about-bugs">No place to mention about bugs<a class="hash-link" aria-label="Direct link to No place to mention about bugs" title="Direct link to No place to mention about bugs" href="https://bolg.kossiitkgp.org/writing-kickass-readmes#no-place-to-mention-about-bugs">​</a></h3>
<p>You don’t have a bug management system? Okay, I agree this isn’t really always
required but if you do, you should explicitly mention and link to that. If you
talk about bugs in GitHub issues, then mention it there. Also if you are using
GitHub, use labels to specify the bugs. If you still track bugs using emails via
mailing list, specify that too also include a link to the old archives of the
mailing list.</p>
<h3 class="anchor anchorWithStickyNavbar_ywN1" id="no-mention-about-the-version-control-system">No mention about the version control system<a class="hash-link" aria-label="Direct link to No mention about the version control system" title="Direct link to No mention about the version control system" href="https://bolg.kossiitkgp.org/writing-kickass-readmes#no-mention-about-the-version-control-system">​</a></h3>
<p>Well if you are seeing the project on Github, is it wrong to assume that it uses
<code>git</code>? Yes, there are many projects that I know use multiple version control
systems and the best example is <code>nmap</code>. They accept patches (and PRs) in all
forms and integrate it together. So explicitly mention about all the version
control systems that you would be using and how you would accept foreign code
for each.</p>
<h3 class="anchor anchorWithStickyNavbar_ywN1" id="no-contacts">No contacts<a class="hash-link" aria-label="Direct link to No contacts" title="Direct link to No contacts" href="https://bolg.kossiitkgp.org/writing-kickass-readmes#no-contacts">​</a></h3>
<p>How should the viewer contact you in case he needs something or has something
for you? Probably now you have a good incentive to give out your contact
information (mainly email is good) for others to contact you or just say “Thanks
for the awesome software!”.</p>
<h3 class="anchor anchorWithStickyNavbar_ywN1" id="no-fancy-gui-pictures">No fancy GUI pictures<a class="hash-link" aria-label="Direct link to No fancy GUI pictures" title="Direct link to No fancy GUI pictures" href="https://bolg.kossiitkgp.org/writing-kickass-readmes#no-fancy-gui-pictures">​</a></h3>
<p>You probably would have spent a hell lot of time in designing and tweaking the
GUI and were frustrated when a font size looks bigger than it should, so you
should show it off. There are lots of people who like the fancy GUI way of
software rather than the good old black terminal with green text. If you have a
fancy GUI, try and put the pictures of it in the README. GitHub’s markdown
renders it, but I don’t think <code>man</code> pages do. But if you <strong>really</strong> care about
man pages, you probably won’t even have cared enough to make a fancy GUI.</p>
<h3 class="anchor anchorWithStickyNavbar_ywN1" id="no-table-of-contents">No table of contents<a class="hash-link" aria-label="Direct link to No table of contents" title="Direct link to No table of contents" href="https://bolg.kossiitkgp.org/writing-kickass-readmes#no-table-of-contents">​</a></h3>
<p>Well if you try to write everything that I have pointed out, then it is probably
good for you to follow this advice too. Have a <code>Table of Contents</code>. This way,
the README will look more organized and it would make reading much easier.</p>
<p>Okay, now that I have ranted a lot, I hope you know <strong>How to Write KickAss
READMEs</strong>.</p>
<hr>
<p><em>This <a href="http://www.bauva.com/blog/Writing-Kickass-READMEs/" target="_blank" rel="noopener noreferrer">article</a> originally
appeared in Pranit Bauva’s <a href="http://www.bauva.com/" target="_blank" rel="noopener noreferrer">website</a>.</em></p>]]></content>
        <author>
            <name>Pranit Bauva</name>
            <uri>https://github.com/pranitbauva1997</uri>
        </author>
        <category label="Engineering" term="Engineering"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Breaking Github Down]]></title>
        <id>https://bolg.kossiitkgp.org/breaking-github-down</id>
        <link href="https://bolg.kossiitkgp.org/breaking-github-down"/>
        <updated>2017-03-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[During my mid semester exams, one night I was getting bored so I decided to]]></summary>
        <content type="html"><![CDATA[<p>During my mid semester exams, one night I was getting bored so I decided to
check how to break the most used code hosting website
<a href="https://github.com/" target="_blank" rel="noopener noreferrer">GitHub</a>. I wrote a
script<a href="https://github.com/DefCon-007/Commiter-source" target="_blank" rel="noopener noreferrer">[1]</a> to add infinite
commits to a repository named
“Commiter”<a href="https://github.com/DefCon-007/Commiter" target="_blank" rel="noopener noreferrer">[2]</a>. It added a dot at the
end of a text file after every commit. The script pushed to the master branch
after every 10,000 commits and then after 1,00,000 commits it deleted the
repository and then cloned it back with just the last commit. I had to do it
because after a large number of commits the directory size was quite
large(approx 7–9 GBs).</p>
<p>With the help of this script I was able to find three bugs on GitHub after which
they blocked my repository<a href="https://github.com/DefCon-007/Commiter" target="_blank" rel="noopener noreferrer">[2]</a> .</p>
<ol>
<li><strong>Z-index for commit label of contribution graph was not proper</strong> :</li>
</ol>
<p>Below is the screenshot of the issue I am talking about.</p>
<p><img decoding="async" loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*RTWPIaRI0H0hm0FCwxsZlg.png" alt="" class="img_fUvR">
<span class="figcaption_hack">Issue #1</span></p>
<p>The label for the commit number should be above the graph. I got the following
response for this issue.</p>
<p><img decoding="async" loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*nlqHSF2LRW8qJ5t3J34cvg.png" alt="" class="img_fUvR">
<span class="figcaption_hack">Reply for issue #3</span></p>
<p><strong>2. Latest commit info was not loading :</strong></p>
<p>After some days the I noticed that the GitHub was failing to load the latest
commit information on the repository homepage.</p>
<p><img decoding="async" loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*Z4JGEWJ5rZYt_xMtsTu_oA.png" alt="" class="img_fUvR">
<span class="figcaption_hack">Issue #2</span></p>
<p>And for this issue I got the following reply.</p>
<p><img decoding="async" loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*ZS_cheHLvv5xxdFYQyuGEA.png" alt="" class="img_fUvR">
<span class="figcaption_hack">Reply for issue #2</span></p>
<p><strong>3. Contributions graph failing to load :</strong></p>
<p>According to me this was a major bug. The contributions graph stopped loading.
It showed the below screen for hours and then the page said “Failed to load
contributions graph”.</p>
<p><img decoding="async" loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*H7bPVHj9h4VJn5ABHz9JGQ.png" alt="" class="img_fUvR">
<span class="figcaption_hack">Issue #3</span></p>
<p>Sadly this was the last issue I was able to track. After reporting this people
at GitHub disabled access to my repository. The reason stated by them was :</p>
<blockquote>
<p>The repository you’re inquiring about, DefCon-007/Commiter, has been deemed
abusive to our system and we have disabled it.</p>
</blockquote>
<blockquote>
<p>Large numbers of commits do not lend themselves well to versioning with Git and
performance issues with a repository of this size can endanger the availability
of your repo as well as other user’s repositories. Additionally, the pattern of
your commits is very different than that which Git was meant to handle, and
therefore consumes far more resources than a normal Git repository of its size.</p>
</blockquote>
<p>And at the end they clearly mentioned that the repository access will not
enabled again.</p>
<p>P.S. : I was able to reach around 6,567,567 commits.</p>
<p>So this was my story how I used my mid semester exam frustration to do some
mischief with GitHub.</p>
<p>References :</p>
<p>[1]
<a href="https://github.com/DefCon-007/Commiter-source" target="_blank" rel="noopener noreferrer">https://github.com/DefCon-007/Commiter-source</a></p>
<p>[2]<a href="https://github.com/DefCon-007/Commiter" target="_blank" rel="noopener noreferrer">https://github.com/DefCon-007/Commiter</a></p>]]></content>
        <author>
            <name>Ayush Goyal</name>
            <uri>https://github.com/Defcon-007</uri>
        </author>
        <category label="Engineering" term="Engineering"/>
    </entry>
</feed>