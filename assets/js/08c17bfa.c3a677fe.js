"use strict";(self.webpackChunkkoss_bolg=self.webpackChunkkoss_bolg||[]).push([[291],{2510:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>r,toc:()=>h});var n=o(6070),i=o(5710);const s={slug:"writing-kickass-readmes",title:"Writing Kickass READMEs",authors:"bauva",tags:["engineering"]},a=void 0,r={permalink:"/writing-kickass-readmes",editUrl:"https://github.com/kossiitkgp/bolg/blog/2017-03-14-writing-kickass-readmes.md",source:"@site/blog/2017-03-14-writing-kickass-readmes.md",title:"Writing Kickass READMEs",description:"Writing documentation for code is extremely important. Alas! I realized this",date:"2017-03-14T00:00:00.000Z",tags:[{inline:!1,label:"Engineering",permalink:"/tags/engineering",description:"Technical blogs"}],readingTime:8.15,hasTruncateMarker:!1,authors:[{name:"Pranit Bauva",title:"Advisor",url:"https://github.com/pranitbauva1997",imageURL:"https://github.com/pranitbauva1997.png",key:"bauva"}],frontMatter:{slug:"writing-kickass-readmes",title:"Writing Kickass READMEs",authors:"bauva",tags:["engineering"]},unlisted:!1,prevItem:{title:"An informal introduction to KWoC",permalink:"/informal-introduction-to-kwoc"},nextItem:{title:"Breaking Github Down",permalink:"/breaking-github-down"}},l={authorsImageUrls:[void 0]},h=[{value:"Not a clear description of the project",id:"not-a-clear-description-of-the-project",level:3},{value:"Not having a installation guide (or an incomplete one)",id:"not-having-a-installation-guide-or-an-incomplete-one",level:3},{value:"No User Documentation",id:"no-user-documentation",level:3},{value:"No guide for people to actually contribute",id:"no-guide-for-people-to-actually-contribute",level:3},{value:"No technical documentation",id:"no-technical-documentation",level:3},{value:"No mention of how to run tests",id:"no-mention-of-how-to-run-tests",level:3},{value:"No license",id:"no-license",level:3},{value:"No place to mention about bugs",id:"no-place-to-mention-about-bugs",level:3},{value:"No mention about the version control system",id:"no-mention-about-the-version-control-system",level:3},{value:"No contacts",id:"no-contacts",level:3},{value:"No fancy GUI pictures",id:"no-fancy-gui-pictures",level:3},{value:"No table of contents",id:"no-table-of-contents",level:3}];function u(e){const t={a:"a",code:"code",em:"em",h3:"h3",hr:"hr",p:"p",strong:"strong",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["Writing documentation for code is ",(0,n.jsx)(t.strong,{children:"extremely"})," important. Alas! I realized this\nlate. Nevertheless, you should not make this mistake again."]}),"\n",(0,n.jsx)(t.p,{children:"This is written with respect to software related READMEs, if you want guidelines\nfor other stuff, then probably this isn\u2019t the right place."}),"\n",(0,n.jsx)(t.p,{children:"Let\u2019s discuss the potential problems of not having a good README:"}),"\n",(0,n.jsx)(t.h3,{id:"not-a-clear-description-of-the-project",children:"Not a clear description of the project"}),"\n",(0,n.jsx)(t.p,{children:"I don\u2019t recount how many times this has happened with me. I usually just scroll\nthrough all of my friends\u2019 projects on GitHub to see what they are upto these\ndays and time and again I have been disappointed by not seeing a good\ndescription about the project and it is too time consuming to read the whole\nsource code to find out what that repository is actually doing."}),"\n",(0,n.jsxs)(t.p,{children:["In fact some professional projects too have vague description and you are left\nclueless as to what the code does. Sometimes the project is so big that they\ncan\u2019t really mention all of it in one thing. That is the time you should\nprobably split it in many repositories or folders (if you desperately want a big\nmono repo like Google) and each folder should contain some high-level\ninformation of what the code inside it will do, just like recursive ",(0,n.jsx)(t.code,{children:"Makefiles"}),"."]}),"\n",(0,n.jsx)(t.h3,{id:"not-having-a-installation-guide-or-an-incomplete-one",children:"Not having a installation guide (or an incomplete one)"}),"\n",(0,n.jsx)(t.p,{children:"So since you have got the viewer interested in trying our your software by\nwriting a good introduction, you would now probably piss off her by sucking at\nwriting an installation guide."}),"\n",(0,n.jsx)(t.p,{children:"What a developer should understand is that since your development environment is\nsetup to run that code, doesn\u2019t mean everybody\u2019s is. One should always write the\nwhole installation process for all systems that the software supports and it\nshould clearly mention that the software doesn\u2019t really have support for this\nsystem but it would be great to support it in future or something."}),"\n",(0,n.jsxs)(t.p,{children:["For unix-based systems, one should list out all the ways to install the\nsoftware. Let\u2019s take an example of Ubuntu. If you have managed to get your\nsoftware packaged with a ",(0,n.jsx)(t.code,{children:".deb"})," file and also uploaded it upstream so that it\ncan be used with ",(0,n.jsx)(t.code,{children:"apt-get"}),", then that\u2019s just awesome!"]}),"\n",(0,n.jsxs)(t.p,{children:["Sometimes you might be releasing it and then packing the source code in a\n",(0,n.jsx)(t.code,{children:"tar.gz"})," format, still awesome. In the latter case, it would be worth while to\nmention all of the dependencies required. Also, just the name isn\u2019t enough,\ntheir exact version numbers is even better because you might never know when a\npython code breaks because of the version bump because well that\u2019s how things\nwork in python world."]}),"\n",(0,n.jsxs)(t.p,{children:["If you are expecting the user to do a ",(0,n.jsx)(t.code,{children:"gcc"})," based compiling for each source code\nfile then God just forgive you. It is time to move on to at least ",(0,n.jsx)(t.code,{children:"Makefiles"})," to\nautomate that process for you."]}),"\n",(0,n.jsxs)(t.p,{children:["If something doesn\u2019t work in particular systems, it is ",(0,n.jsx)(t.strong,{children:"important"})," to list it\nout."]}),"\n",(0,n.jsx)(t.h3,{id:"no-user-documentation",children:"No User Documentation"}),"\n",(0,n.jsxs)(t.p,{children:["You don\u2019t have a user documentation? Well then how do you expect others to use\nyour software. User documentation should be in another file or folder (if it is\nquite big) and should probably be in some kind of a format which can be rendered\neasily. You can either write it in markdown format or in Github wiki\u2019s so that\nit can be easily read on GitHub or you can write in ",(0,n.jsx)(t.code,{children:"man"})," pages form for the\noldies to read it. But you should have it. And that\u2019s not it, your README should\nexplicitly point out to the documentation and also tell the user how to access\nit and actually read it."]}),"\n",(0,n.jsx)(t.p,{children:"Also you can include the very basic use case in the README itself."}),"\n",(0,n.jsx)(t.h3,{id:"no-guide-for-people-to-actually-contribute",children:"No guide for people to actually contribute"}),"\n",(0,n.jsxs)(t.p,{children:["If you have the viewer till now and she is thinking of actually contributing to\nyour project, then kudos, your project is ",(0,n.jsx)(t.strong,{children:"awesome"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"A very important part of the contributing guide is to setup the development\nenvironment. Again in this, it is worthwhile to get into the platform specific\ninformation. For eg. Windows will have different development environment while\nUbuntu will have a different one. You should mention what IDE you used or the\ntools that you used."}),"\n",(0,n.jsx)(t.p,{children:"Now your project might have some development related dependencies. You should\nmention about that too. Now finally the viewer can have successful environment\nsetup to actually contribute to your code."}),"\n",(0,n.jsx)(t.p,{children:"Now, you might be following some conventions for writing your code, right? It is\nworth while to mention the conventions that you have followed in a separate file\nand link it in the README."}),"\n",(0,n.jsxs)(t.p,{children:["Then you would have a specific way or two in which you accept others\u2019 code,\nright? You might be using Github\u2019s Pull Request based system or the age old\nsending patches via email using ",(0,n.jsx)(t.code,{children:"git-format-patch"})," and ",(0,n.jsx)(t.code,{children:"git-send-email"})," just\nlike old times. Whichever you prefer, it is important to specify this in a new\nfile possibly named as ",(0,n.jsx)(t.code,{children:"CONTRIBUTING GUIDELINES"})," or something. If you have any\nspecifics about the project ",(0,n.jsx)(t.strong,{children:"mention"})," it there. Don\u2019t just expect people to\nknow it by default."]}),"\n",(0,n.jsxs)(t.p,{children:["It is also worth while to link the ",(0,n.jsx)(t.code,{children:"easy to fix"})," bugs for new comers so that\nthey can get familiar with the code base without trying to mingle with the core\nparts of the software."]}),"\n",(0,n.jsx)(t.h3,{id:"no-technical-documentation",children:"No technical documentation"}),"\n",(0,n.jsxs)(t.p,{children:["If you are having a big project, then you might be having a \u201ccore\u201d part which is\nused by other parts of code. Have you documented it? Or you just expect people\nto ",(0,n.jsx)(t.code,{children:"git-grep"})," and ",(0,n.jsx)(t.code,{children:"git-blame"})," to find the relevant use cases, definition of the\nfunctions and the documentation inside the commit messages? If you are doing\nthat, it is not exactly bad (I understand you might be having your own reasons)\nbut it is good to write a technical documentation wherein you will tell the\nprogrammer what a method does and how to use it. This will also make sure she\ndoesn\u2019t write a method to do the same stuff again and thus it would reduce your\nredundancy."]}),"\n",(0,n.jsx)(t.h3,{id:"no-mention-of-how-to-run-tests",children:"No mention of how to run tests"}),"\n",(0,n.jsx)(t.p,{children:"Of course you project has tests, otherwise how can you make sure that by writing\nnew code, you don\u2019t break the old code? Your README should contain how to run\nthe test suite. There are tons of different test suites available in the market\nand it is time consuming for people to check out your test framework and make\nguesses as how one could probably run it. You should mention how to run\nindividual tests, the whole test suite, and how to skip some tests, and if your\ntest suite framework doesn\u2019t support all of these features, then maybe the one\nyou are using should be replaced."}),"\n",(0,n.jsx)(t.h3,{id:"no-license",children:"No license"}),"\n",(0,n.jsxs)(t.p,{children:["Yes, legal matters are important too! Whether you are releasing it as an truly\nopen-sourced software with ",(0,n.jsx)(t.code,{children:"BSD"})," license or something else, you should mention\nit. If you don\u2019t realize the importance of licensing, that is maybe because your\nproject isn\u2019t big enough. Once a lot of people read your code, use it, they\nmight try to finger with it whether you like it or not. You should explicitly\nspecify \u201chow much fingering\u201d you can tolerate in a separate file named as\n",(0,n.jsx)(t.code,{children:"LICENCE"})," in full detail like a legal document and if you are using a popular\nlicense, you can just mention the name in the README."]}),"\n",(0,n.jsx)(t.h3,{id:"no-place-to-mention-about-bugs",children:"No place to mention about bugs"}),"\n",(0,n.jsx)(t.p,{children:"You don\u2019t have a bug management system? Okay, I agree this isn\u2019t really always\nrequired but if you do, you should explicitly mention and link to that. If you\ntalk about bugs in GitHub issues, then mention it there. Also if you are using\nGitHub, use labels to specify the bugs. If you still track bugs using emails via\nmailing list, specify that too also include a link to the old archives of the\nmailing list."}),"\n",(0,n.jsx)(t.h3,{id:"no-mention-about-the-version-control-system",children:"No mention about the version control system"}),"\n",(0,n.jsxs)(t.p,{children:["Well if you are seeing the project on Github, is it wrong to assume that it uses\n",(0,n.jsx)(t.code,{children:"git"}),"? Yes, there are many projects that I know use multiple version control\nsystems and the best example is ",(0,n.jsx)(t.code,{children:"nmap"}),". They accept patches (and PRs) in all\nforms and integrate it together. So explicitly mention about all the version\ncontrol systems that you would be using and how you would accept foreign code\nfor each."]}),"\n",(0,n.jsx)(t.h3,{id:"no-contacts",children:"No contacts"}),"\n",(0,n.jsx)(t.p,{children:"How should the viewer contact you in case he needs something or has something\nfor you? Probably now you have a good incentive to give out your contact\ninformation (mainly email is good) for others to contact you or just say \u201cThanks\nfor the awesome software!\u201d."}),"\n",(0,n.jsx)(t.h3,{id:"no-fancy-gui-pictures",children:"No fancy GUI pictures"}),"\n",(0,n.jsxs)(t.p,{children:["You probably would have spent a hell lot of time in designing and tweaking the\nGUI and were frustrated when a font size looks bigger than it should, so you\nshould show it off. There are lots of people who like the fancy GUI way of\nsoftware rather than the good old black terminal with green text. If you have a\nfancy GUI, try and put the pictures of it in the README. GitHub\u2019s markdown\nrenders it, but I don\u2019t think ",(0,n.jsx)(t.code,{children:"man"})," pages do. But if you ",(0,n.jsx)(t.strong,{children:"really"})," care about\nman pages, you probably won\u2019t even have cared enough to make a fancy GUI."]}),"\n",(0,n.jsx)(t.h3,{id:"no-table-of-contents",children:"No table of contents"}),"\n",(0,n.jsxs)(t.p,{children:["Well if you try to write everything that I have pointed out, then it is probably\ngood for you to follow this advice too. Have a ",(0,n.jsx)(t.code,{children:"Table of Contents"}),". This way,\nthe README will look more organized and it would make reading much easier."]}),"\n",(0,n.jsxs)(t.p,{children:["Okay, now that I have ranted a lot, I hope you know ",(0,n.jsx)(t.strong,{children:"How to Write KickAss\nREADMEs"}),"."]}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsxs)(t.em,{children:["This ",(0,n.jsx)(t.a,{href:"http://www.bauva.com/blog/Writing-Kickass-READMEs/",children:"article"})," originally\nappeared in Pranit Bauva\u2019s ",(0,n.jsx)(t.a,{href:"http://www.bauva.com/",children:"website"}),"."]})})]})}function c(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},5710:(e,t,o)=>{o.d(t,{R:()=>a,x:()=>r});var n=o(758);const i={},s=n.createContext(i);function a(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);